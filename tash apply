[1mdiff --git a/.idea/dataSources.xml b/.idea/dataSources.xml[m
[1mindex d838470..4f20ce0 100644[m
[1m--- a/.idea/dataSources.xml[m
[1m+++ b/.idea/dataSources.xml[m
[36m@@ -13,5 +13,29 @@[m
       </jdbc-additional-properties>[m
       <working-dir>$ProjectFileDir$</working-dir>[m
     </data-source>[m
[32m+[m[32m    <data-source source="LOCAL" name="studyb_db" uuid="50b4e4b5-3f5d-4c55-b96a-92bf6c92865f">[m
[32m+[m[32m      <driver-ref>mariadb</driver-ref>[m
[32m+[m[32m      <synchronize>true</synchronize>[m
[32m+[m[32m      <jdbc-driver>org.mariadb.jdbc.Driver</jdbc-driver>[m
[32m+[m[32m      <jdbc-url>jdbc:mariadb://localhost:3306</jdbc-url>[m
[32m+[m[32m      <jdbc-additional-properties>[m
[32m+[m[32m        <property name="com.intellij.clouds.kubernetes.db.host.port" />[m
[32m+[m[32m        <property name="com.intellij.clouds.kubernetes.db.enabled" value="false" />[m
[32m+[m[32m        <property name="com.intellij.clouds.kubernetes.db.container.port" />[m
[32m+[m[32m      </jdbc-additional-properties>[m
[32m+[m[32m      <working-dir>$ProjectFileDir$</working-dir>[m
[32m+[m[32m    </data-source>[m
[32m+[m[32m    <data-source source="LOCAL" name="test" uuid="104670c9-5fbc-42f4-a9e3-5d82f0654029">[m
[32m+[m[32m      <driver-ref>mysql.8</driver-ref>[m
[32m+[m[32m      <synchronize>true</synchronize>[m
[32m+[m[32m      <jdbc-driver>com.mysql.cj.jdbc.Driver</jdbc-driver>[m
[32m+[m[32m      <jdbc-url>jdbc:mysql://localhost:3306</jdbc-url>[m
[32m+[m[32m      <jdbc-additional-properties>[m
[32m+[m[32m        <property name="com.intellij.clouds.kubernetes.db.host.port" />[m
[32m+[m[32m        <property name="com.intellij.clouds.kubernetes.db.enabled" value="false" />[m
[32m+[m[32m        <property name="com.intellij.clouds.kubernetes.db.container.port" />[m
[32m+[m[32m      </jdbc-additional-properties>[m
[32m+[m[32m      <working-dir>$ProjectFileDir$</working-dir>[m
[32m+[m[32m    </data-source>[m
   </component>[m
 </project>[m
\ No newline at end of file[m
[1mdiff --git a/backend/study-group-service/pom.xml b/backend/study-group-service/pom.xml[m
[1mindex 497b62b..6fb64bb 100644[m
[1m--- a/backend/study-group-service/pom.xml[m
[1m+++ b/backend/study-group-service/pom.xml[m
[36m@@ -26,6 +26,17 @@[m
             <groupId>org.springframework.boot</groupId>[m
             <artifactId>spring-boot-starter-data-jpa</artifactId>[m
         </dependency>[m
[32m+[m[32m        <dependency>[m
[32m+[m[32m            <groupId>com.sun.mail</groupId>[m
[32m+[m[32m            <artifactId>javax.mail</artifactId>[m
[32m+[m[32m            <version>1.6.2</version>[m
[32m+[m[32m        </dependency>[m
[32m+[m
[32m+[m[32m        <dependency>[m
[32m+[m[32m            <groupId>org.springframework.boot</groupId>[m
[32m+[m[32m            <artifactId>spring-boot-starter-mail</artifactId>[m
[32m+[m[32m        </dependency>[m
[32m+[m
         <dependency>[m
             <groupId>org.springframework.boot</groupId>[m
             <artifactId>spring-boot-starter-web</artifactId>[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/config/WebConfig.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/config/WebConfig.java[m
[1mindex 8f732b4..ee86051 100644[m
[1m--- a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/config/WebConfig.java[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/config/WebConfig.java[m
[36m@@ -1,19 +1,24 @@[m
[31m-package com.studybuddy.studygroupservice.config;[m
[32m+[m[32m    package com.studybuddy.studygroupservice.config;[m
 [m
[31m-import org.springframework.context.annotation.Bean;[m
[31m-import org.springframework.context.annotation.Configuration;[m
[31m-import org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[31m-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
[32m+[m[32m    import org.springframework.context.annotation.Bean;[m
[32m+[m[32m    import org.springframework.context.annotation.Configuration;[m
[32m+[m[32m    import org.springframework.web.client.RestTemplate;[m
[32m+[m[32m    import org.springframework.web.servlet.config.annotation.CorsRegistry;[m
[32m+[m[32m    import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
 [m
[31m-@Configuration[m
[31m-public class WebConfig implements WebMvcConfigurer {[m
[32m+[m[32m    @Configuration[m
[32m+[m[32m    public class WebConfig implements WebMvcConfigurer {[m
 [m
[31m-    @Override[m
[31m-    public void addCorsMappings(CorsRegistry registry) {[m
[31m-        registry.addMapping("/**")[m
[31m-                .allowedOrigins("http://localhost:4200") // Allow frontend URL[m
[31m-                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")[m
[31m-                .allowedHeaders("*");[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void addCorsMappings(CorsRegistry registry) {[m
[32m+[m[32m            registry.addMapping("/**")[m
[32m+[m[32m                    .allowedOrigins("http://localhost:4200") // Allow frontend URL[m
[32m+[m[32m                    .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")[m
[32m+[m[32m                    .allowedHeaders("*");[m
[32m+[m[32m        }[m
[32m+[m[32m        @Bean[m
[32m+[m[32m        public RestTemplate restTemplate() {[m
[32m+[m[32m            return new RestTemplate();[m
[32m+[m[32m        }[m
     }[m
[31m-}[m
 [m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/controllers/InvitationController.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/controllers/InvitationController.java[m
[1mindex 33442ea..246d922 100644[m
[1m--- a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/controllers/InvitationController.java[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/controllers/InvitationController.java[m
[36m@@ -4,8 +4,14 @@[m [mimport com.studybuddy.studygroupservice.dto.InvitationDTO;[m
 import com.studybuddy.studygroupservice.dto.StudyGroupDTO;[m
 import com.studybuddy.studygroupservice.entities.Invitation;[m
 import com.studybuddy.studygroupservice.services.InvitationService;[m
[32m+[m[32mimport com.studybuddy.studygroupservice.dto.UserDTO; // Ensure this is the correct UserDTO[m
 import lombok.RequiredArgsConstructor;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Value;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
 import org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.client.RestTemplate;[m
 [m
 import java.util.List;[m
 [m
[36m@@ -15,17 +21,58 @@[m [mimport java.util.List;[m
 @CrossOrigin(origins = "http://localhost:4200") // if needed for frontend[m
 public class InvitationController {[m
 [m
[32m+[m[32m    @Autowired[m
[32m+[m[32m    private RestTemplate restTemplate;[m
[32m+[m
     private final InvitationService invitationService;[m
 [m
[32m+[m[32m    @Value("${user-service.base-url}") // Inject the base URL from application.properties[m
[32m+[m[32m    private String userServiceBaseUrl;[m
[32m+[m
     @PostMapping[m
     public InvitationDTO createInvitation(@RequestBody InvitationDTO invitationDTO) {[m
         Invitation createdInvitation = invitationService.createInvitation(invitationDTO);[m
         return mapToInvitationDTO(createdInvitation);[m
     }[m
[31m-    @PostMapping("/send")  // Use '/send' endpoint for sending invitations[m
[31m-    public InvitationDTO sendInvitation(@RequestBody InvitationDTO invitationDTO) {[m
[31m-        return invitationService.sendInvitation(invitationDTO);[m
[32m+[m
[32m+[m[32m    @PostMapping("/send")[m
[32m+[m[32m    public ResponseEntity<String> sendInvitation(@RequestBody InvitationDTO invitationDTO) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            // Validate the incoming DTO (optional: add specific validation logic)[m
[32m+[m[32m            if (invitationDTO == null || invitationDTO.getInviteeEmail() == null || invitationDTO.getStudyGroup() == null) {[m
[32m+[m[32m                return ResponseEntity.badRequest().body("Invalid invitation payload. Please provide all required fields.");[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Construct the full URL using the base URL and the email path[m
[32m+[m[32m            String url = userServiceBaseUrl + "/users/email/" + invitationDTO.getInviteeEmail();[m
[32m+[m
[32m+[m[32m            // Make a REST call to the UserService to get the user by email (address)[m
[32m+[m[32m            ResponseEntity<UserDTO> response = restTemplate.getForEntity(url, UserDTO.class);[m
[32m+[m
[32m+[m[32m            // Check if the user was found[m
[32m+[m[32m            if (response.getStatusCode() == HttpStatus.OK) {[m
[32m+[m[32m                UserDTO user = response.getBody();[m
[32m+[m
[32m+[m[32m                // If user exists, send the invitation[m
[32m+[m
[32m+[m[32m                // Return success response[m
[32m+[m[32m                return ResponseEntity.ok("Invitation sent successfully!");[m
[32m+[m[32m            } else {[m
[32m+[m[32m                // If the user doesn't exist, return not found[m
[32m+[m[32m                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found with the provided email.");[m
[32m+[m[32m            }[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            e.printStackTrace();[m
[32m+[m[32m            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to send invitation: " + e.getMessage());[m
[32m+[m[32m        }[m
     }[m
[32m+[m
[32m+[m[32m    @GetMapping("/check-email")[m
[32m+[m[32m    public ResponseEntity<Boolean> checkEmailExists(@RequestParam String email) {[m
[32m+[m[32m        boolean exists = invitationService.checkEmailExists(email);[m
[32m+[m[32m        return ResponseEntity.ok(exists);[m
[32m+[m[32m    }[m
[32m+[m
     @GetMapping[m
     public List<InvitationDTO> getAllInvitations() {[m
         return invitationService.getAllInvitations();[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/InvitationDTO.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/InvitationDTO.java[m
[1mindex 141167f..867a621 100644[m
[1m--- a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/InvitationDTO.java[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/InvitationDTO.java[m
[36m@@ -11,6 +11,7 @@[m [mpublic class InvitationDTO {[m
     private String type;[m
     private Long inviterUserId;[m
     private Long inviteeUserId;[m
[32m+[m[32m    private String inviteeEmail; // Add this field for email-based invitations[m
     private LocalDateTime createdAt;[m
     private StudyGroupDTO studyGroup;[m
 }[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/UserDTO.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/UserDTO.java[m
[1mnew file mode 100644[m
[1mindex 0000000..671d644[m
[1m--- /dev/null[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/dto/UserDTO.java[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32mpackage com.studybuddy.studygroupservice.dto;[m
[32m+[m
[32m+[m[32mimport lombok.Data;[m
[32m+[m
[32m+[m[32m@Data[m
[32m+[m[32mpublic class UserDTO {[m
[32m+[m[32m    private Long id;[m
[32m+[m[32m    private String name;[m
[32m+[m[32m    private String username;[m
[32m+[m[32m    private String address; // Maps to the 'address' field in the User entity[m
[32m+[m[32m    private String role;   // Optional: Include role if needed[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/entities/StudyGroup.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/entities/StudyGroup.java[m
[1mindex d97b218..9e3e7b8 100644[m
[1m--- a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/entities/StudyGroup.java[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/entities/StudyGroup.java[m
[36m@@ -2,6 +2,7 @@[m [mpackage com.studybuddy.studygroupservice.entities;[m
 [m
 import jakarta.persistence.*;[m
 import lombok.Data;[m
[32m+[m
 import java.util.ArrayList;[m
 import java.util.List;[m
 [m
[36m@@ -14,6 +15,7 @@[m [mpublic class StudyGroup {[m
     private Long id;[m
 [m
     private String name;[m
[32m+[m
     @Column(columnDefinition = "TEXT")[m
     private String description;[m
 [m
[36m@@ -22,4 +24,6 @@[m [mpublic class StudyGroup {[m
 [m
     @OneToMany(mappedBy = "studyGroup", cascade = CascadeType.ALL, orphanRemoval = true)[m
     private List<Invitation> invitations = new ArrayList<>();[m
[31m-}[m
\ No newline at end of file[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/InvitationService.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/InvitationService.java[m
[1mindex 38bb7bf..5de34ab 100644[m
[1m--- a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/InvitationService.java[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/InvitationService.java[m
[36m@@ -2,13 +2,16 @@[m [mpackage com.studybuddy.studygroupservice.services;[m
 [m
 import com.studybuddy.studygroupservice.dto.InvitationDTO;[m
 import com.studybuddy.studygroupservice.dto.StudyGroupDTO;[m
[32m+[m[32mimport com.studybuddy.studygroupservice.dto.UserDTO;[m
 import com.studybuddy.studygroupservice.entities.Invitation;[m
 import com.studybuddy.studygroupservice.entities.StudyGroup;[m
 import com.studybuddy.studygroupservice.repositories.InvitationRepository;[m
 import com.studybuddy.studygroupservice.repositories.StudyGroupRepository;[m
 import lombok.RequiredArgsConstructor;[m
 import org.springframework.stereotype.Service;[m
[32m+[m[32mimport org.springframework.util.StringUtils;[m
 [m
[32m+[m[32mimport java.time.LocalDateTime;[m
 import java.util.List;[m
 import java.util.stream.Collectors;[m
 [m
[36m@@ -16,25 +19,59 @@[m [mimport java.util.stream.Collectors;[m
 @RequiredArgsConstructor[m
 public class InvitationService {[m
 [m
[31m-[m
     private final InvitationRepository invitationRepository;[m
     private final StudyGroupRepository studyGroupRepository;[m
[31m-    public InvitationDTO sendInvitation(InvitationDTO invitationDTO) {[m
[32m+[m[32m    private final UserServiceClient userServiceClient; // Injected User Service Client[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Sends an invitation using the provided DTO.[m
[32m+[m[32m     * Resolves the invitee's user ID from their email (address).[m
[32m+[m[32m     */[m
[32m+[m[32m    public InvitationDTO sendInvitation(InvitationDTO invitationDTO, String token) {[m
[32m+[m[32m        // Step 1: Validate the token[m
[32m+[m[32m        if (StringUtils.isEmpty(token)) {[m
[32m+[m[32m            throw new IllegalArgumentException("Authorization token is missing.");[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Step 2: Resolve Invitee User ID from Email[m
[32m+[m[32m        UserDTO invitee = userServiceClient.getUserByEmail(invitationDTO.getInviteeEmail(), token);[m
[32m+[m[32m        if (invitee == null) {[m
[32m+[m[32m            throw new RuntimeException("User not found with email: " + invitationDTO.getInviteeEmail());[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Step 3: Validate Study Group[m
[32m+[m[32m        StudyGroup studyGroup = studyGroupRepository.findById(invitationDTO.getStudyGroup().getId())[m
[32m+[m[32m                .orElseThrow(() -> new RuntimeException("Study group not found with ID: " + invitationDTO.getStudyGroup().getId()));[m
[32m+[m
[32m+[m[32m        // Step 4: Create Invitation Entity[m
         Invitation invitation = new Invitation();[m
         invitation.setStatus(invitationDTO.getStatus());[m
         invitation.setType(invitationDTO.getType());[m
         invitation.setInviterUserId(invitationDTO.getInviterUserId());[m
[31m-        invitation.setInviteeUserId(invitationDTO.getInviteeUserId());[m
[31m-[m
[31m-        StudyGroup studyGroup = studyGroupRepository.findById(invitationDTO.getStudyGroup().getId())[m
[31m-                .orElseThrow(() -> new RuntimeException("Study group not found"));[m
[31m-[m
[32m+[m[32m        invitation.setInviteeUserId(invitee.getId()); // Map email to user ID[m
[32m+[m[32m        invitation.setCreatedAt(LocalDateTime.now());[m
         invitation.setStudyGroup(studyGroup);[m
 [m
[32m+[m[32m        // Step 5: Save Invitation[m
         Invitation savedInvitation = invitationRepository.save(invitation);[m
 [m
[32m+[m[32m        // Step 6: Return Invitation DTO[m
         return mapToInvitationDTO(savedInvitation);[m
     }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Checks if an email (address) exists in the users table via the user service.[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean checkEmailExists(String email) {[m
[32m+[m[32m        if (StringUtils.isEmpty(email)) {[m
[32m+[m[32m            throw new IllegalArgumentException("Email cannot be null or empty.");[m
[32m+[m[32m        }[m
[32m+[m[32m        return userServiceClient.checkAddressExists(email);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Fetches all invitations.[m
[32m+[m[32m     */[m
     public List<InvitationDTO> getAllInvitations() {[m
         List<Invitation> invitations = invitationRepository.findAll();[m
         return invitations.stream()[m
[36m@@ -42,25 +79,36 @@[m [mpublic class InvitationService {[m
                 .collect(Collectors.toList());[m
     }[m
 [m
[31m-[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Creates a new invitation.[m
[32m+[m[32m     */[m
     public Invitation createInvitation(InvitationDTO invitationDTO) {[m
[32m+[m[32m        // Validate Study Group[m
[32m+[m[32m        StudyGroup studyGroup = studyGroupRepository.findById(invitationDTO.getStudyGroup().getId())[m
[32m+[m[32m                .orElseThrow(() -> new RuntimeException("Study group not found with ID: " + invitationDTO.getStudyGroup().getId()));[m
[32m+[m
[32m+[m[32m        // Create Invitation Entity[m
         Invitation invitation = new Invitation();[m
         invitation.setStatus(invitationDTO.getStatus());[m
         invitation.setType(invitationDTO.getType());[m
         invitation.setInviterUserId(invitationDTO.getInviterUserId());[m
         invitation.setInviteeUserId(invitationDTO.getInviteeUserId());[m
[31m-[m
[31m-        StudyGroup studyGroup = studyGroupRepository.findById(invitationDTO.getStudyGroup().getId())[m
[31m-                .orElseThrow(() -> new RuntimeException("Study group not found"));[m
[31m-[m
         invitation.setStudyGroup(studyGroup);[m
 [m
[32m+[m[32m        // Save Invitation[m
         return invitationRepository.save(invitation);[m
     }[m
 [m
[32m+[m[32m    /**[m
[32m+[m[32m     * Deletes an invitation by ID.[m
[32m+[m[32m     */[m
     public void deleteInvitation(Long id) {[m
         invitationRepository.deleteById(id);[m
     }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Maps an Invitation entity to an InvitationDTO.[m
[32m+[m[32m     */[m
     private InvitationDTO mapToInvitationDTO(Invitation invitation) {[m
         InvitationDTO dto = new InvitationDTO();[m
         dto.setId(invitation.getId());[m
[36m@@ -70,6 +118,7 @@[m [mpublic class InvitationService {[m
         dto.setInviteeUserId(invitation.getInviteeUserId());[m
         dto.setCreatedAt(invitation.getCreatedAt());[m
 [m
[32m+[m[32m        // Minimal StudyGroupDTO[m
         StudyGroupDTO groupDTO = new StudyGroupDTO();[m
         groupDTO.setId(invitation.getStudyGroup().getId());[m
         groupDTO.setName(invitation.getStudyGroup().getName());[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/StudyGroupService.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/StudyGroupService.java[m
[1mindex b43426f..32d6fcc 100644[m
[1m--- a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/StudyGroupService.java[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/StudyGroupService.java[m
[36m@@ -28,21 +28,22 @@[m [mpublic class StudyGroupService {[m
         return studyGroupRepository.save(studyGroup);[m
     }[m
 [m
[32m+[m[32m    // Get study group by ID[m
     public StudyGroup getGroupById(Long id) {[m
         return studyGroupRepository.findById(id)[m
[31m-                .orElseThrow(() -> new RuntimeException("Group not found"));[m
[32m+[m[32m                .orElseThrow(() -> new RuntimeException("Study group not found"));[m
     }[m
 [m
[32m+[m[32m    // Get all study groups[m
     public List<StudyGroup> getAllGroups() {[m
[31m-        return studyGroupRepository.findAll();  // This will retrieve all study groups from the database[m
[32m+[m[32m        return studyGroupRepository.findAll();  // Retrieves all study groups[m
     }[m
 [m
[31m-    // Add this method to your StudyGroupService.java[m
[32m+[m[32m    // Get all groups for a specific user (by owner user ID)[m
     public List<StudyGroup> getUserGroups(Long userId) {[m
         return studyGroupRepository.findByOwnerUserId(userId);[m
     }[m
 [m
[31m-[m
     // Update an existing study group[m
     public StudyGroup updateGroup(Long id, StudyGroupDTO studyGroupDTO) {[m
         StudyGroup studyGroup = studyGroupRepository.findById(id)[m
[36m@@ -54,19 +55,11 @@[m [mpublic class StudyGroupService {[m
         return studyGroupRepository.save(studyGroup);[m
     }[m
 [m
[31m-[m
     // Delete a study group[m
     public void deleteGroup(Long id) {[m
         studyGroupRepository.deleteById(id);[m
     }[m
 [m
[31m-    @Transactional[m
[31m-    public List<StudyGroup> getGroupsWhereUserIsInvited(Long userId) {[m
[31m-        List<Invitation> invitations = invitationRepository.findByInviteeUserId(userId);[m
[31m-        return invitations.stream()[m
[31m-                .map(Invitation::getStudyGroup)[m
[31m-                .distinct()[m
[31m-                .collect(Collectors.toList());[m
[31m-    }[m
[32m+[m
 [m
 }[m
[1mdiff --git a/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/UserServiceClient.java b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/UserServiceClient.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5eacb53[m
[1m--- /dev/null[m
[1m+++ b/backend/study-group-service/src/main/java/com/studybuddy/studygroupservice/services/UserServiceClient.java[m
[36m@@ -0,0 +1,117 @@[m
[32m+[m[32mpackage com.studybuddy.studygroupservice.services;[m
[32m+[m
[32m+[m[32mimport com.studybuddy.studygroupservice.dto.UserDTO;[m
[32m+[m[32mimport org.slf4j.Logger;[m
[32m+[m[32mimport org.slf4j.LoggerFactory;[m
[32m+[m[32mimport org.springframework.beans.factory.annotation.Value;[m
[32m+[m[32mimport org.springframework.http.HttpEntity;[m
[32m+[m[32mimport org.springframework.http.HttpHeaders;[m
[32m+[m[32mimport org.springframework.http.HttpMethod;[m
[32m+[m[32mimport org.springframework.http.ResponseEntity;[m
[32m+[m[32mimport org.springframework.stereotype.Service;[m
[32m+[m[32mimport org.springframework.web.client.HttpClientErrorException;[m
[32m+[m[32mimport org.springframework.web.client.RestTemplate;[m
[32m+[m
[32m+[m[32m@Service[m
[32m+[m[32mpublic class UserServiceClient {[m
[32m+[m
[32m+[m[32m    private static final Logger logger = LoggerFactory.getLogger(UserServiceClient.class);[m
[32m+[m
[32m+[m[32m    @Value("${user-service.base-url}")[m
[32m+[m[32m    private String userServiceBaseUrl;[m
[32m+[m
[32m+[m[32m    private final RestTemplate restTemplate;[m
[32m+[m
[32m+[m[32m    public UserServiceClient(RestTemplate restTemplate) {[m
[32m+[m[32m        this.restTemplate = restTemplate;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Validates a JWT token by sending it to the User Service.[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean validateToken(String token) {[m
[32m+[m[32m        String url = userServiceBaseUrl + "/api/users/validate-token";[m
[32m+[m[32m        logger.debug("Attempting to validate token with URL: {}", url);[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            HttpHeaders headers = new HttpHeaders();[m
[32m+[m[32m            headers.set("Authorization", "Bearer " + token);[m
[32m+[m
[32m+[m[32m            HttpEntity<String> entity = new HttpEntity<>(headers);[m
[32m+[m[32m            logger.debug("Sending POST request to validate token with headers: {}", headers);[m
[32m+[m
[32m+[m[32m            ResponseEntity<Boolean> response = restTemplate.exchange(url, HttpMethod.POST, entity, Boolean.class);[m
[32m+[m
[32m+[m[32m            logger.debug("Response for token validation: {}", response.getBody());[m
[32m+[m[32m            return response.getBody() != null && response.getBody();[m
[32m+[m[32m        } catch (HttpClientErrorException e) {[m
[32m+[m[32m            logger.error("Error while validating token: {} with status code: {}", e.getMessage(), e.getStatusCode());[m
[32m+[m[32m            return false;[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            logger.error("Unexpected error while validating token: {}", e.getMessage());[m
[32m+[m[32m            throw new RuntimeException("Unexpected error while validating token", e);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Checks if an email exists in the User Service.[m
[32m+[m[32m     */[m
[32m+[m[32m    public boolean checkAddressExists(String address) {[m
[32m+[m[32m        String url = userServiceBaseUrl + "/api/users/check-address?address=" + address;[m
[32m+[m[32m        logger.debug("Checking if address exists with URL: {}", url);[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            Boolean exists = restTemplate.getForObject(url, Boolean.class);[m
[32m+[m
[32m+[m[32m            if (exists == null) {[m
[32m+[m[32m                logger.warn("Received null response for checkAddressExists with address: {}", address);[m
[32m+[m[32m                return false;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            logger.debug("Response for checkAddressExists for address {}: {}", address, exists);[m
[32m+[m[32m            return exists;[m
[32m+[m[32m        } catch (HttpClientErrorException e) {[m
[32m+[m[32m            logger.error("Error while checking address existence for address {}: {}", address, e.getMessage());[m
[32m+[m[32m            throw new RuntimeException("Failed to check address existence", e);[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            logger.error("Unexpected error while checking address existence for address {}: {}", address, e.getMessage());[m
[32m+[m[32m            throw new RuntimeException("Unexpected error while checking address existence", e);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Fetches a user by their email (address) using a token for authentication.[m
[32m+[m[32m     */[m
[32m+[m[32m    public UserDTO getUserByEmail(String email, String token) {[m
[32m+[m[32m        String url = userServiceBaseUrl + "/api/users/get-by-email?email=" + email;[m
[32m+[m[32m        logger.debug("Attempting to fetch user by email with URL: {}", url);[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            HttpHeaders headers = new HttpHeaders();[m
[32m+[m[32m            headers.set("Authorization", "Bearer " + token);[m
[32m+[m[32m            logger.debug("Setting Authorization header with token: {}", token);[m
[32m+[m
[32m+[m[32m            HttpEntity<String> entity = new HttpEntity<>(headers);[m
[32m+[m[32m            logger.debug("Sending GET request to fetch user with email: {} and headers: {}", email, headers);[m
[32m+[m
[32m+[m[32m            ResponseEntity<UserDTO> response = restTemplate.exchange(url, HttpMethod.GET, entity, UserDTO.class);[m
[32m+[m
[32m+[m[32m            if (response.getBody() != null) {[m
[32m+[m[32m                logger.debug("User fetched successfully for email: {}", email);[m
[32m+[m[32m            } else {[m
[32m+[m[32m                logger.warn("Received null response body for email: {}", email);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            return response.getBody();[m
[32m+[m[32m        } catch (HttpClientErrorException.NotFound e) {[m
[32m+[m[32m            logger.warn("User not found for email: {}", email);[m
[32m+[m[32m            return null;[m
[32m+[m[32m        } catch (HttpClientErrorException e) {[m
[32m+[m[32m            logger.error("HttpClientErrorException while fetching user for email {}: {} with status code: {}", email, e.getMessage(), e.getStatusCode());[m
[32m+[m[32m            throw new RuntimeException("Failed to fetch user", e);[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            logger.error("Unexpected error while fetching user for email {}: {}", email, e.getMessage());[m
[32m+[m[32m            throw new RuntimeException("Failed to fetch user", e);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/backend/study-group-service/src/main/resources/application.properties b/backend/study-group-service/src/main/resources/application.properties[m
[1mindex bf5fcc6..d29b047 100644[m
[1m--- a/backend/study-group-service/src/main/resources/application.properties[m
[1m+++ b/backend/study-group-service/src/main/resources/application.properties[m
[36m@@ -1,12 +1,12 @@[m
 spring.application.name=study-group-service[m
 spring.datasource.url=jdbc:mysql://localhost:3306/sbuddy_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true[m
 spring.datasource.username=root[m
[31m-spring.datasource.password=changeme[m
[32m+[m[32mspring.datasource.password=amen$$123[m
 spring.jpa.show-sql=true[m
 spring.jpa.hibernate.ddl-auto=update[m
 spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect[m
 server.port=8081[m
[31m-openai.api.key=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[m
[32m+[m[32mopenai.api.key=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[m
 spring.mail.host=smtp.gmail.com[m
 spring.mail.port=587    [m
 spring.mail.username=laouiniamen1211@gmail.com[m
[36m@@ -17,6 +17,7 @@[m [mspring.mail.properties.mail.smtp.starttls.enable=true[m
 email.to=iheb.souissi@esprit.tn[m
 logging.level.org.springframework.web.client.RestTemplate=DEBUG[m
 logging.level.org.springframework.http.client=DEBUG[m
[32m+[m[32muser-service.base-url=http://localhost:8083/api/users[m
 [m
 [m
 [m
[1mdiff --git a/backend/user-service/pom.xml b/backend/user-service/pom.xml[m
[1mindex 51ebb75..a7a1469 100644[m
[1m--- a/backend/user-service/pom.xml[m
[1m+++ b/backend/user-service/pom.xml[m
[36m@@ -82,6 +82,10 @@[m
             <artifactId>spring-boot-starter-test</artifactId>[m
             <scope>test</scope>[m
         </dependency>[m
[32m+[m[32m        <dependency>[m
[32m+[m[32m            <groupId>org.springframework.boot</groupId>[m
[32m+[m[32m            <artifactId>spring-boot-starter-actuator</artifactId>[m
[32m+[m[32m        </dependency>[m
     </dependencies>[m
 [m
     <build>[m
[1mdiff --git a/backend/user-service/src/main/java/com/studybuddy/userservice/config/WebConfig.java b/backend/user-service/src/main/java/com/studybuddy/userservice/config/WebConfig.java[m
[1mindex 258bf3e..a473102 100644[m
[1m--- a/backend/user-service/src/main/java/com/studybuddy/userservice/config/WebConfig.java[m
[1m+++ b/backend/user-service/src/main/java/com/studybuddy/userservice/config/WebConfig.java[m
[36m@@ -1,6 +1,8 @@[m
 package com.studybuddy.userservice.config;[m
 [m
[32m+[m[32mimport org.springframework.context.annotation.Bean;[m
 import org.springframework.context.annotation.Configuration;[m
[32m+[m[32mimport org.springframework.web.client.RestTemplate;[m
 import org.springframework.web.servlet.config.annotation.CorsRegistry;[m
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;[m
 [m
[36m@@ -15,4 +17,8 @@[m [mpublic class WebConfig implements WebMvcConfigurer {[m
 		.allowedHeaders("*")[m
 		.allowCredentials(true);[m
 	}[m
[32m+[m	[32m@Bean[m
[32m+[m	[32mpublic RestTemplate restTemplate() {[m
[32m+[m		[32mreturn new RestTemplate();[m
[32m+[m	[32m}[m
 }[m
[1mdiff --git a/backend/user-service/src/main/java/com/studybuddy/userservice/controller/UserController.java b/backend/user-service/src/main/java/com/studybuddy/userservice/controller/UserController.java[m
[1mindex 3e745c7..9fdce33 100644[m
[1m--- a/backend/user-service/src/main/java/com/studybuddy/userservice/controller/UserController.java[m
[1m+++ b/backend/user-service/src/main/java/com/studybuddy/userservice/controller/UserController.java[m
[36m@@ -4,17 +4,42 @@[m [mpackage com.studybuddy.userservice.controller;[m
 import com.studybuddy.userservice.dto.User;[m
 import com.studybuddy.userservice.service.UserService;[m
 import org.springframework.beans.factory.annotation.Autowired;[m
[32m+[m[32mimport org.springframework.http.HttpStatus;[m
 import org.springframework.http.ResponseEntity;[m
 import org.springframework.web.bind.annotation.*;[m
[32m+[m[32mimport org.springframework.web.client.RestTemplate;[m
 [m
 import java.util.List;[m
[32m+[m[32mimport java.util.Optional;[m
 [m
 @RestController[m
 @RequestMapping("/api/users")[m
 public class UserController {[m
[32m+[m
     @Autowired[m
     private UserService userService;[m
 [m
[32m+[m[32m    @Autowired[m
[32m+[m[32m    private RestTemplate restTemplate;  // Inject RestTemplate[m
[32m+[m
[32m+[m[32m    private final String STUDY_GROUP_SERVICE_URL = "http://localhost:8081/api/invitations/send";  //[m
[32m+[m[32m    @PostMapping("/send-invitation")[m
[32m+[m[32m    public ResponseEntity<String> sendInvitation(@RequestBody String userEmail) {[m
[32m+[m[32m        // You can perform validation on the email here if needed[m
[32m+[m[32m        try {[m
[32m+[m[32m            // Call the study-group-service's invitation endpoint[m
[32m+[m[32m            ResponseEntity<String> response = restTemplate.postForEntity(STUDY_GROUP_SERVICE_URL, userEmail, String.class);[m
[32m+[m
[32m+[m[32m            // Check response status and handle it accordingly[m
[32m+[m[32m            if (response.getStatusCode().is2xxSuccessful()) {[m
[32m+[m[32m                return ResponseEntity.ok("Invitation sent successfully");[m
[32m+[m[32m            } else {[m
[32m+[m[32m                return ResponseEntity.status(response.getStatusCode()).body("Failed to send invitation");[m
[32m+[m[32m            }[m
[32m+[m[32m        } catch (Exception e) {[m
[32m+[m[32m            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error sending invitation");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
     @GetMapping[m
     public List<User> getAllUsers() {[m
         return userService.getAllUsers();[m
[36m@@ -40,4 +65,25 @@[m [mpublic class UserController {[m
         userService.deleteUser(id);[m
         return ResponseEntity.noContent().build();[m
     }[m
[32m+[m
[32m+[m[32m    @GetMapping("/{id}")[m
[32m+[m[32m    public ResponseEntity<User> getUserById(@PathVariable int id) {[m
[32m+[m[32m        Optional<User> user = userService.getUserById(id);[m
[32m+[m[32m        return user.map(ResponseEntity::ok)[m
[32m+[m[32m                .orElseGet(() -> ResponseEntity.notFound().build());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @GetMapping("/check-address")[m
[32m+[m[32m    public ResponseEntity<Boolean> checkAddressExists(@RequestParam String address) {[m
[32m+[m[32m        boolean exists = userService.checkEmailExists(address);[m
[32m+[m[32m        return ResponseEntity.ok(exists);[m
[32m+[m[32m    }[m
[32m+[m[32m    @GetMapping("/get-by-address")[m
[32m+[m[32m    public ResponseEntity<User> getUserByAddress(@RequestParam String address) {[m
[32m+[m[32m        Optional<User> user = userService.getUserByAddress(address);  // Get user by address (email)[m
[32m+[m[32m        return user.map(ResponseEntity::ok)[m
[32m+[m[32m                .orElseGet(() -> ResponseEntity.notFound().build());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/backend/user-service/src/main/java/com/studybuddy/userservice/dto/User.java b/backend/user-service/src/main/java/com/studybuddy/userservice/dto/User.java[m
[1mindex 56d09a5..75ed43c 100644[m
[1m--- a/backend/user-service/src/main/java/com/studybuddy/userservice/dto/User.java[m
[1m+++ b/backend/user-service/src/main/java/com/studybuddy/userservice/dto/User.java[m
[36m@@ -33,4 +33,4 @@[m [mpublic class User {[m
 	private Integer age; // Added age field[m
 [m
 	private String role; // Added role field (e.g., USER, ADMIN)[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/backend/user-service/src/main/java/com/studybuddy/userservice/repo/LoginRepository.java b/backend/user-service/src/main/java/com/studybuddy/userservice/repo/LoginRepository.java[m
[1mindex 5903c95..55105e8 100644[m
[1m--- a/backend/user-service/src/main/java/com/studybuddy/userservice/repo/LoginRepository.java[m
[1m+++ b/backend/user-service/src/main/java/com/studybuddy/userservice/repo/LoginRepository.java[m
[36m@@ -12,4 +12,7 @@[m [mimport org.springframework.stereotype.Repository;[m
 public interface LoginRepository extends JpaRepository<User, Integer> {[m
 [m
     Optional<User> findByUsername(String username);[m
[31m-}[m
[32m+[m[32m    Optional<User> findByAddress(String address);  // Finding user by address (email)[m
[32m+[m
[32m+[m[32m    boolean existsByAddress(String address);[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/backend/user-service/src/main/java/com/studybuddy/userservice/service/LoginService.java b/backend/user-service/src/main/java/com/studybuddy/userservice/service/LoginService.java[m
[1mindex 0b88026..95cffa2 100644[m
[1m--- a/backend/user-service/src/main/java/com/studybuddy/userservice/service/LoginService.java[m
[1m+++ b/backend/user-service/src/main/java/com/studybuddy/userservice/service/LoginService.java[m
[36m@@ -57,4 +57,4 @@[m [mpublic class LoginService {[m
 [m
 		return response;[m
 	}[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/backend/user-service/src/main/java/com/studybuddy/userservice/service/UserService.java b/backend/user-service/src/main/java/com/studybuddy/userservice/service/UserService.java[m
[1mindex 2be6ad7..be1e503 100644[m
[1m--- a/backend/user-service/src/main/java/com/studybuddy/userservice/service/UserService.java[m
[1m+++ b/backend/user-service/src/main/java/com/studybuddy/userservice/service/UserService.java[m
[36m@@ -42,4 +42,17 @@[m [mpublic class UserService {[m
     public void deleteUser(int id) {[m
         loginRepository.deleteById(id);[m
     }[m
[32m+[m
[32m+[m[32m    public Optional<User> getUserById(int id) {[m
[32m+[m[32m        return loginRepository.findById(id);[m
[32m+[m[32m    }[m
[32m+[m[32m    // New method to check if an email exists[m
[32m+[m[32m    public boolean checkEmailExists(String address) {[m
[32m+[m[32m        // Use the updated repository method[m
[32m+[m[32m        return loginRepository.existsByAddress(address);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Optional<User> getUserByAddress(String address) {[m
[32m+[m[32m        return loginRepository.findByAddress(address);  // Fetch user by address[m
[32m+[m[32m    }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/backend/user-service/src/main/resources/application.properties b/backend/user-service/src/main/resources/application.properties[m
[1mindex 8a5f8be..1727067 100644[m
[1m--- a/backend/user-service/src/main/resources/application.properties[m
[1m+++ b/backend/user-service/src/main/resources/application.properties[m
[36m@@ -1,14 +1,13 @@[m
 # MySQL datasource configuration[m
 spring.datasource.url=jdbc:mysql://localhost:3306/user_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true[m
 spring.datasource.username=root[m
[31m-spring.datasource.password=changeme[m
[32m+[m[32mspring.datasource.password=amen$$123[m
 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver[m
 [m
 # JPA/Hibernate configuration[m
 spring.jpa.hibernate.ddl-auto=update[m
[31m-spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect[m
[32m+[m[32mspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect[m
 spring.jpa.show-sql=true[m
 spring.servlet.multipart.max-file-size=10MB[m
 spring.servlet.multipart.max-request-size=10MB[m
[31m-[m
 server.port=8083[m
\ No newline at end of file[m
[1mdiff --git a/frontend/src/app/invitations/invitation-send/invitation-send.component.html b/frontend/src/app/invitations/invitation-send/invitation-send.component.html[m
[1mindex e0a92fb..3ddfb20 100644[m
[1m--- a/frontend/src/app/invitations/invitation-send/invitation-send.component.html[m
[1m+++ b/frontend/src/app/invitations/invitation-send/invitation-send.component.html[m
[36m@@ -1,15 +1,15 @@[m
 <mat-card>[m
[31m-    <mat-card-header>[m
[31m-      <mat-card-title>Send Invitation</mat-card-title>[m
[31m-    </mat-card-header>[m
[31m-    <mat-card-content>[m
[31m-      <form (ngSubmit)="sendInvitation()">[m
[31m-        <mat-form-field appearance="fill">[m
[31m-          <mat-label>Invitee User ID</mat-label>[m
[31m-          <input matInput type="number" [(ngModel)]="invitationData.inviteeUserId" name="inviteeUserId" required>[m
[31m-        </mat-form-field>[m
[31m-  [m
[31m-        <button mat-raised-button color="primary" type="submit">Send</button>[m
[31m-      </form>[m
[31m-    </mat-card-content>[m
[31m-  </mat-card>[m
\ No newline at end of file[m
[32m+[m[32m  <mat-card-header>[m
[32m+[m[32m    <mat-card-title>Send Invitation</mat-card-title>[m
[32m+[m[32m  </mat-card-header>[m
[32m+[m[32m  <mat-card-content>[m
[32m+[m[32m    <form (ngSubmit)="sendInvitation()">[m
[32m+[m[32m      <mat-form-field appearance="fill">[m
[32m+[m[32m        <mat-label>Invitee Email</mat-label>[m
[32m+[m[32m        <input matInput type="email" [(ngModel)]="invitationData.inviteeEmail" name="inviteeEmail" required>[m
[32m+[m[32m      </mat-form-field>[m
[32m+[m
[32m+[m[32m      <button mat-raised-button color="primary" type="submit">Send</button>[m
[32m+[m[32m    </form>[m
[32m+[m[32m  </mat-card-content>[m
[32m+[m[32m</mat-card>[m
\ No newline at end of file[m
[1mdiff --git a/frontend/src/app/invitations/invitation-send/invitation-send.component.ts b/frontend/src/app/invitations/invitation-send/invitation-send.component.ts[m
[1mindex 3656633..9fd85d6 100644[m
[1m--- a/frontend/src/app/invitations/invitation-send/invitation-send.component.ts[m
[1m+++ b/frontend/src/app/invitations/invitation-send/invitation-send.component.ts[m
[36m@@ -2,6 +2,8 @@[m [mimport { Component } from '@angular/core';[m
 import { ActivatedRoute } from '@angular/router';[m
 import { InvitationService } from '../../services/invitation.service';[m
 import { SendInvitation } from '../../models/invitation.model';[m
[32m+[m[32mimport { AuthService } from '../../services/auth.service';[m
[32m+[m[32mimport { Router } from '@angular/router'; // Add Router for navigation[m
 [m
 @Component({[m
   selector: 'app-invitation-send',[m
[36m@@ -9,8 +11,8 @@[m [mimport { SendInvitation } from '../../models/invitation.model';[m
 })[m
 export class InvitationSendComponent {[m
   invitationData: SendInvitation = {[m
[31m-    inviterUserId: 1, // Replace with logged-in user dynamically[m
[31m-    inviteeUserId: 0,[m
[32m+[m[32m    inviterUserId: 0,  // This will be dynamically set[m
[32m+[m[32m    inviteeEmail: '',   // Use email instead of user ID[m
     studyGroup: { id: 0 },[m
     status: 'PENDING',[m
     type: 'INVITE'[m
[36m@@ -18,21 +20,45 @@[m [mexport class InvitationSendComponent {[m
 [m
   constructor([m
     private invitationService: InvitationService,[m
[31m-    private route: ActivatedRoute[m
[32m+[m[32m    private route: ActivatedRoute,[m
[32m+[m[32m    private authService: AuthService, // Inject AuthService[m
[32m+[m[32m    private router: Router // Inject Router[m
   ) {[m
[32m+[m[32m    const currentUser = this.authService.getCurrentUser();[m
[32m+[m[32m    if (currentUser) {[m
[32m+[m[32m      this.invitationData.inviterUserId = currentUser.id; // Dynamically set inviterUserId[m
[32m+[m[32m    } else {[m
[32m+[m[32m      // Redirect to login if no current user is found[m
[32m+[m[32m      this.router.navigate(['/login']);[m
[32m+[m[32m    }[m
[32m+[m
     const groupId = this.route.snapshot.paramMap.get('groupId');[m
     this.invitationData.studyGroup.id = groupId ? +groupId : 0;[m
   }[m
 [m
   sendInvitation(): void {[m
[31m-    if (!this.invitationData.inviteeUserId) {[m
[31m-      alert('Please enter a valid Invitee User ID.');[m
[32m+[m[32m    if (!this.invitationData.inviteeEmail) {[m
[32m+[m[32m      alert('Please enter a valid invitee email.');[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Basic email format validation[m
[32m+[m[32m    const emailPattern = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;[m
[32m+[m[32m    if (!emailPattern.test(this.invitationData.inviteeEmail)) {[m
[32m+[m[32m      alert('Please enter a valid email address.');[m
       return;[m
     }[m
 [m
     this.invitationService.sendInvitation(this.invitationData).subscribe({[m
[31m-      next: () => alert('Invitation sent!'),[m
[31m-      error: err => console.error('Failed to send invitation:', err)[m
[32m+[m[32m      next: () => {[m
[32m+[m[32m        alert('Invitation sent successfully!');[m
[32m+[m[32m        // Optionally, navigate to another page, e.g., to a list of invitations[m
[32m+[m[32m        // this.router.navigate(['/some-other-page']);[m
[32m+[m[32m      },[m
[32m+[m[32m      error: (err) => {[m
[32m+[m[32m        console.error('Failed to send invitation:', err);[m
[32m+[m[32m        alert('Failed to send invitation. Please try again.');[m
[32m+[m[32m      }[m
     });[m
   }[m
 }[m
[1mdiff --git a/frontend/src/app/models/invitation.model.ts b/frontend/src/app/models/invitation.model.ts[m
[1mindex 43e47a9..b115667 100644[m
[1m--- a/frontend/src/app/models/invitation.model.ts[m
[1m+++ b/frontend/src/app/models/invitation.model.ts[m
[36m@@ -3,21 +3,21 @@[m [mexport interface Invitation {[m
   status: 'PENDING' | 'ACCEPTED' | 'REJECTED';[m
   type: string;[m
   inviterUserId: number;[m
[31m-  inviteeUserId: number;[m
[31m-  inviteeEmail?: string; // 💌 optional, for email sending[m
[32m+[m[32m  inviteeUserId: number; // Resolved user ID[m
[32m+[m[32m  inviteeEmail?: string; // Optional, for reference (e.g., logging or display)[m
   createdAt: string;[m
   studyGroup: {[m
     id: number;[m
[31m-    name?: string; // optional, in case you want to display the name in the UI[m
[32m+[m[32m    name?: string; // Optional, for displaying the group name in the UI[m
   };[m
 }[m
 [m
 export interface SendInvitation {[m
   inviterUserId: number;[m
[31m-  inviteeUserId: number;[m
[32m+[m[32m  inviteeEmail: string; // Use email instead of user ID[m
   studyGroup: {[m
     id: number;[m
   };[m
[31m-  status?: 'PENDING' | 'ACCEPTED' | 'REJECTED';[m
[31m-  type?: string;[m
[31m-}[m
[32m+[m[32m  status?: 'PENDING' | 'ACCEPTED' | 'REJECTED'; // Optional, defaults to 'PENDING'[m
[32m+[m[32m  type?: string; // Optional, defaults to a default type if not provided[m
[32m+[m[32m}[m[41m [m
\ No newline at end of file[m
[1mdiff --git a/frontend/src/app/services/invitation.service.ts b/frontend/src/app/services/invitation.service.ts[m
[1mindex 25922fc..c3b3d75 100644[m
[1m--- a/frontend/src/app/services/invitation.service.ts[m
[1m+++ b/frontend/src/app/services/invitation.service.ts[m
[36m@@ -1,55 +1,98 @@[m
 import { Injectable } from '@angular/core';[m
[31m-import { HttpClient } from '@angular/common/http';[m
[31m-import { Observable } from 'rxjs';[m
[31m-import { SendInvitation, Invitation } from '../models/invitation.model'; // ✅ import both types[m
[32m+[m[32mimport { HttpClient, HttpHeaders } from '@angular/common/http';[m
[32m+[m[32mimport { catchError, Observable, throwError } from 'rxjs';[m
[32m+[m[32mimport { Router } from '@angular/router'; // ✅ Keep Router for navigation if needed[m
[32m+[m[32mimport { SendInvitation, Invitation } from '../models/invitation.model';[m
 [m
 @Injectable({[m
   providedIn: 'root'[m
 })[m
 export class InvitationService {[m
[31m-  private apiUrl = 'http://localhost:8081/api/invitations'; // Base URL for invitations API[m
[31m-  private notificationApiUrl = 'http://localhost:8081/api/notifications/send'; // Base URL for email notifications[m
[32m+[m[32m  private apiUrl = 'http://localhost:8081/api';[m
[32m+[m[32m  private notificationApiUrl = `${this.apiUrl}/notifications/send`;[m
 [m
[31m-  constructor(private http: HttpClient) {}[m
[32m+[m[32m  constructor(private http: HttpClient, private router: Router) {} // ✅ Keep Router for navigation if needed[m
 [m
   /**[m
[31m-   * Sends an invitation to join a study group.[m
[31m-   * @param invitation The invitation details.[m
[31m-   * @returns An observable of the HTTP POST response.[m
[32m+[m[32m   * Retrieves the authorization token from local storage.[m
[32m+[m[32m   */[m
[32m+[m[32m  private getAuthToken(): string | null {[m
[32m+[m[32m    return localStorage.getItem('auth-token'); // Corrected to 'auth-token'[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Handles errors by logging them and providing a user-friendly message.[m
    */[m
[31m-  sendInvitation(invitation: SendInvitation): Observable<any> {[m
[31m-    return this.http.post<any>(`${this.apiUrl}/send`, invitation);[m
[32m+[m[32m  private handleError(error: any): Observable<never> {[m
[32m+[m[32m    // Log the error details for debugging[m
[32m+[m[32m    console.error('Error details:', error);[m
[32m+[m[32m    console.error('Status:', error.status);[m
[32m+[m[32m    console.error('Message:', error.message);[m
[32m+[m
[32m+[m[32m    // You can optionally navigate the user to an error page or show a modal[m
[32m+[m[32m    if (error.status === 401 || error.status === 403) {[m
[32m+[m[32m      // If unauthorized, redirect to login[m
[32m+[m[32m      this.router.navigate(['/login']);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Return a generic error message for the user[m
[32m+[m[32m    return throwError(() => new Error('An error occurred. Please try again later.'));[m
   }[m
 [m
[32m+[m[32m  /**[m
[32m+[m[32m   * Sends an invitation to join a study group.[m
[32m+[m[32m   */[m
[32m+[m[32msendInvitation(invitation: SendInvitation): Observable<any> {[m
[32m+[m[32m  // Remove the token handling logic since you're not using it[m
[32m+[m[32m  const headers = new HttpHeaders();[m
[32m+[m
[32m+[m[32m  // Send the invitation to the backend API without the token[m
[32m+[m[32m  return this.http.post<any>(`${this.apiUrl}/invitations/send`, invitation, { headers }).pipe([m
[32m+[m[32m    catchError(this.handleError.bind(this))  // Handle errors from HTTP call[m
[32m+[m[32m  );[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
   /**[m
    * Sends an email notification to the invitee.[m
[31m-   * @param groupName The name of the study group.[m
[31m-   * @returns An observable of the HTTP POST response.[m
    */[m
   sendEmail(groupName: string): Observable<any> {[m
[31m-    const subject = 'Study Group Invitation';[m
[31m-    const body = `You have been invited to join the study group: ${groupName}.`;[m
     return this.http.post<any>(this.notificationApiUrl, null, {[m
[31m-      params: {[m
[31m-        groupName[m
[31m-      }[m
[31m-    });[m
[32m+[m[32m      params: { groupName }[m
[32m+[m[32m    }).pipe([m
[32m+[m[32m      catchError(this.handleError.bind(this))  // Reuse error handler[m
[32m+[m[32m    );[m
   }[m
 [m
   /**[m
    * Fetches all invitations for a specific user.[m
[31m-   * @param userId The ID of the user.[m
[31m-   * @returns An observable of the HTTP GET response containing the invitations.[m
    */[m
   getUserInvitations(userId: number): Observable<Invitation[]> {[m
[31m-    return this.http.get<Invitation[]>(`${this.apiUrl}/user/${userId}`);[m
[32m+[m[32m    const token = this.getAuthToken();[m
[32m+[m[32m    const headers = token ? new HttpHeaders({ 'Authorization': `Bearer ${token}` }) : {};[m
[32m+[m
[32m+[m[32m    return this.http.get<Invitation[]>(`${this.apiUrl}/invitations/user/${userId}`, { headers }).pipe([m
[32m+[m[32m      catchError(this.handleError.bind(this))  // Reuse error handler[m
[32m+[m[32m    );[m
   }[m
 [m
   /**[m
    * Fetches all invitations.[m
[31m-   * @returns An observable of the HTTP GET response containing all invitations.[m
    */[m
   getAllInvitations(): Observable<Invitation[]> {[m
[31m-    return this.http.get<Invitation[]>(this.apiUrl);[m
[32m+[m[32m    const token = this.getAuthToken();[m
[32m+[m[32m    const headers = token ? new HttpHeaders({ 'Authorization': `Bearer ${token}` }) : {};[m
[32m+[m
[32m+[m[32m    return this.http.get<Invitation[]>(`${this.apiUrl}/invitations`, { headers }).pipe([m
[32m+[m[32m      catchError(this.handleError.bind(this))  // Reuse error handler[m
[32m+[m[32m    );[m
   }[m
[31m-}[m
\ No newline at end of file[m
[32m+[m[32m}[m
[1mdiff --git a/frontend/src/app/services/user.service.ts b/frontend/src/app/services/user.service.ts[m
[1mindex 12f2116..2305fc4 100644[m
[1m--- a/frontend/src/app/services/user.service.ts[m
[1m+++ b/frontend/src/app/services/user.service.ts[m
[36m@@ -6,23 +6,44 @@[m [mimport { Observable } from 'rxjs';[m
   providedIn: 'root'[m
 })[m
 export class UserService {[m
[31m-  private apiUrl = 'http://localhost:8083/api/users';[m
[32m+[m[32m  private apiUrl = 'http://localhost:8083/api/users'; // Base URL for user service[m
 [m
   constructor(private http: HttpClient) {}[m
 [m
[32m+[m[32m  /**[m
[32m+[m[32m   * Fetches all users from the backend.[m
[32m+[m[32m   */[m
   getAllUsers(): Observable<any[]> {[m
     return this.http.get<any[]>(this.apiUrl);[m
   }[m
 [m
[32m+[m[32m  /**[m
[32m+[m[32m   * Creates a new user in the backend.[m
[32m+[m[32m   */[m
   createUser(user: any): Observable<any> {[m
     return this.http.post<any>(this.apiUrl, user);[m
   }[m
 [m
[32m+[m[32m  /**[m
[32m+[m[32m   * Updates an existing user in the backend.[m
[32m+[m[32m   */[m
   updateUser(id: number, user: any): Observable<any> {[m
     return this.http.put<any>(`${this.apiUrl}/${id}`, user);[m
   }[m
 [m
[32m+[m[32m  /**[m
[32m+[m[32m   * Deletes a user by their ID.[m
[32m+[m[32m   */[m
   deleteUser(id: number): Observable<void> {[m
     return this.http.delete<void>(`${this.apiUrl}/${id}`);[m
   }[m
[31m-}[m
[32m+[m
[32m+[m[32m  /**[m
[32m+[m[32m   * Checks if an email exists in the backend.[m
[32m+[m[32m   * @param email - The email address to check.[m
[32m+[m[32m   * @returns An Observable<boolean> indicating whether the email exists.[m
[32m+[m[32m   */[m
[32m+[m[32m  checkEmailExists(email: string): Observable<boolean> {[m
[32m+[m[32m    return this.http.get<boolean>(`${this.apiUrl}/check-address?address=${encodeURIComponent(email)}`);[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/frontend/src/app/study-groups/study-group-list/study-group-list.component.html b/frontend/src/app/study-groups/study-group-list/study-group-list.component.html[m
[1mindex a18c44f..82bc4d8 100644[m
[1m--- a/frontend/src/app/study-groups/study-group-list/study-group-list.component.html[m
[1m+++ b/frontend/src/app/study-groups/study-group-list/study-group-list.component.html[m
[36m@@ -21,7 +21,7 @@[m
           (click)="selectGroup(group)"[m
           [class.active]="group.id === selectedGroup?.id">[m
         <span>{{ group.name }}</span>[m
[31m-        <button mat-icon-button color="accent" (click)="sendInvitation(group.id)">[m
[32m+[m[32m        <button mat-icon-button color="accent" (click)="openInvitationModal(group.id)">[m
           <mat-icon>person_add</mat-icon>[m
         </button>[m
 [m
[36m@@ -132,6 +132,33 @@[m
     </div>[m
   </div>[m
 </div>[m
[32m+[m[32m<!-- Invitation Email Modal -->[m
[32m+[m[32m<div class="modal fade" id="invitationEmailModal" tabindex="-1" aria-labelledby="invitationEmailModalLabel" aria-hidden="true">[m
[32m+[m[32m  <div class="modal-dialog modal-dialog-centered">[m
[32m+[m[32m    <div class="modal-content">[m
[32m+[m[32m      <div class="modal-header">[m
[32m+[m[32m        <h5 class="modal-title" id="invitationEmailModalLabel">Send Invitation</h5>[m
[32m+[m[32m        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>[m
[32m+[m[32m      </div>[m
[32m+[m[32m      <div class="modal-body">[m
[32m+[m[32m        <form #invitationForm="ngForm">[m
[32m+[m[32m          <div class="mb-3">[m
[32m+[m[32m            <label for="inviteeEmail" class="form-label">Invitee Email</label>[m
[32m+[m[32m            <input type="email" class="form-control" id="inviteeEmail" name="inviteeEmail" [(ngModel)]="inviteeEmail" required />[m
[32m+[m[32m            <div *ngIf="isInvalidEmail" class="text-danger mt-2">[m
[32m+[m[32m              The email does not exist in the system.[m
[32m+[m[32m            </div>[m
[32m+[m[32m          </div>[m
[32m+[m[32m        </form>[m
[32m+[m[32m      </div>[m
[32m+[m[32m      <div class="modal-footer">[m
[32m+[m[32m        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>[m
[32m+[m[32m        <button type="button" class="btn btn-primary" (click)="validateAndSendInvitation()" [disabled]="!invitationForm.form.valid">Send</button>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    </div>[m
[32m+[m[32m  </div>[m
[32m+[m[32m</div>[m
[32m+[m
 [m
 <!-- Bootstrap JS -->[m
 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>[m
[1mdiff --git a/frontend/src/app/study-groups/study-group-list/study-group-list.component.ts b/frontend/src/app/study-groups/study-group-list/study-group-list.component.ts[m
[1mindex 695d7a0..d23bcf7 100644[m
[1m--- a/frontend/src/app/study-groups/study-group-list/study-group-list.component.ts[m
[1m+++ b/frontend/src/app/study-groups/study-group-list/study-group-list.component.ts[m
[36m@@ -1,13 +1,12 @@[m
[32m+[m[32mimport { Component, OnInit } from '@angular/core';[m
 import { StudyGroupService } from '../../services/study-group.service';[m
 import { InvitationService } from '../../services/invitation.service';[m
 import { Router } from '@angular/router';[m
 import { StudyGroup } from '../../models/study-group.model';[m
[31m-import { SendInvitation } from '../../models/invitation.model';[m
 import { ToastrService } from 'ngx-toastr';[m
 import * as bootstrap from 'bootstrap';[m
[31m-import { Component, OnInit, ViewChild, ViewContainerRef, ComponentRef } from '@angular/core';[m
[31m-import { StudyGroupCreateComponent } from '../study-group-create/study-group-create.component';[m
[31m-import {AuthService} from "../../services/auth.service"; // Adjust path accordingly[m
[32m+[m[32mimport { AuthService } from '../../services/auth.service';[m
[32m+[m[32mimport { UserService } from '../../services/user.service'; // Import UserService[m
 [m
 @Component({[m
   selector: 'app-study-group-list',[m
[36m@@ -15,27 +14,26 @@[m [mimport {AuthService} from "../../services/auth.service"; // Adjust path accordin[m
   styleUrls: ['./study-group-list.component.scss'][m
 })[m
 export class StudyGroupListComponent implements OnInit {[m
[31m-  @ViewChild('createGroupModalContainer', { read: ViewContainerRef }) modalContainer!: ViewContainerRef;[m
[31m-[m
   studyGroups: StudyGroup[] = [];[m
   selectedGroup: StudyGroup | null = null;[m
[31m-  selectedDetailGroup: StudyGroup | null = null;[m
   searchTerm: string = '';[m
   isSidebarCollapsed: boolean = false;[m
   showProfileDropdown: boolean = false;[m
[31m-  showAllGroups: boolean = false;[m
[31m-  currentUserId!: number;[m
[31m-  selectedInviteeUserId = 4;[m
[31m-[m
[32m+[m[32m  selectedDetailGroup: StudyGroup | null = null;[m
   modal: bootstrap.Modal | null = null;[m
[31m-  user: { username: string; role: string } | null;[m
[32m+[m[32m  user: { username: string; role: string } | null = null;[m
[32m+[m
[32m+[m[32m  currentUserId!: number;[m
[32m+[m[32m  inviteeEmail: string = ''; // To store the entered email[m
[32m+[m[32m  isInvalidEmail: boolean = false; // To track email validation[m
 [m
   constructor([m
     private studyGroupService: StudyGroupService,[m
     private invitationService: InvitationService,[m
     private router: Router,[m
     private toastr: ToastrService,[m
[31m-    private authService: AuthService // Add this line[m
[32m+[m[32m    private authService: AuthService,[m
[32m+[m[32m    private userService: UserService, // Inject UserService[m
   ) {[m
     this.user = this.authService.getCurrentUser();[m
   }[m
[36m@@ -54,40 +52,98 @@[m [mexport class StudyGroupListComponent implements OnInit {[m
     }[m
   }[m
 [m
[32m+[m[32m  goToUpdateGroup(groupId: number): void {[m
[32m+[m[32m    this.router.navigate([`/study-group/update-group/${groupId}`]);[m
[32m+[m[32m    this.closeModal();[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  openGroupDetails(group: StudyGroup): void {[m
[32m+[m[32m    if (!group || group.id === undefined) {[m
[32m+[m[32m      this.toastr.error('Invalid group selected');[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Hide modal if it's already open[m
[32m+[m[32m    if (this.modal) {[m
[32m+[m[32m      this.modal.hide();[m
[32m+[m[32m    }[m
 [m
[32m+[m[32m    // Reset the selected detail group to force re-render[m
[32m+[m[32m    this.selectedDetailGroup = null;[m
 [m
[31m-  get safeGroupId(): number | null {[m
[31m-    return this.selectedGroup?.id ?? null;[m
[32m+[m[32m    setTimeout(() => {[m
[32m+[m[32m      this.selectedDetailGroup = group;[m
[32m+[m
[32m+[m[32m      const modalEl = document.getElementById('groupDetailsModal');[m
[32m+[m[32m      if (modalEl) {[m
[32m+[m[32m        this.modal = new bootstrap.Modal(modalEl);[m
[32m+[m[32m        this.modal.show();[m
[32m+[m[32m      }[m
[32m+[m[32m    }, 0);[m
   }[m
 [m
[31m-  sendInvitation(groupId: number): void {[m
[31m-    const invitation: SendInvitation = {[m
[31m-      studyGroup: { id: groupId },[m
[31m-      inviterUserId: this.currentUserId,[m
[31m-      inviteeUserId: this.selectedInviteeUserId[m
[31m-    };[m
[32m+[m[32m  openInvitationModal(groupId: number): void {[m
[32m+[m[32m    this.inviteeEmail = ''; // Reset email input[m
[32m+[m[32m    this.isInvalidEmail = false; // Reset error state[m
[32m+[m
[32m+[m[32m    // Find the selected group and explicitly convert undefined to null[m
[32m+[m[32m    this.selectedGroup = this.studyGroups.find(group => group.id === groupId) || null;[m
[32m+[m
[32m+[m[32m    const modalEl = document.getElementById('invitationEmailModal');[m
[32m+[m[32m    if (modalEl) {[m
[32m+[m[32m      const modal = new bootstrap.Modal(modalEl);[m
[32m+[m[32m      modal.show();[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  validateAndSendInvitation(): void {[m
[32m+[m[32m    if (!this.inviteeEmail) {[m
[32m+[m[32m      this.toastr.error('Please enter a valid email address.');[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
 [m
[31m-    const groupName = this.selectedGroup?.name || 'Unnamed Group';[m
[32m+[m[32m    // Check if the email exists in the database[m
[32m+[m[32m    this.userService.checkEmailExists(this.inviteeEmail).subscribe({[m
[32m+[m[32m      next: (exists) => {[m
[32m+[m[32m        if (exists) {[m
[32m+[m[32m          this.isInvalidEmail = false;[m
[32m+[m[32m          this.sendInvitationWithEmail(); // Proceed with sending the invitation[m
[32m+[m[32m        } else {[m
[32m+[m[32m          this.isInvalidEmail = true; // Show error message[m
[32m+[m[32m          this.toastr.error('The email does not exist in the system.');[m
[32m+[m[32m        }[m
[32m+[m[32m      },[m
[32m+[m[32m      error: (error) => {[m
[32m+[m[32m        console.error('Error checking email:', error);[m
[32m+[m[32m        this.toastr.error('Failed to validate email.');[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
[32m+[m[32m  }[m
 [m
[32m+[m[32m  sendInvitationWithEmail(): void {[m
[32m+[m[32m    if (!this.selectedGroup) {[m
[32m+[m[32m      this.toastr.error('No group selected.');[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
[32m+[m[41m  [m
[32m+[m[32m    const invitation = {[m
[32m+[m[32m      studyGroup: { id: this.selectedGroup.id },[m
[32m+[m[32m      inviterUserId: this.currentUserId,[m
[32m+[m[32m      inviteeEmail: this.inviteeEmail // Utilise l'email saisi[m
[32m+[m[32m    };[m
[32m+[m[41m  [m
[32m+[m[32m    // Vérifie les données envoyées[m
[32m+[m[32m    console.log('Sending invitation with the following data:', invitation);[m
[32m+[m[41m  [m
     this.invitationService.sendInvitation(invitation).subscribe({[m
       next: (response) => {[m
[31m-        console.log('Invitation sent to group ID:', groupId, response);[m
[32m+[m[32m        console.log('Invitation sent successfully:', response);[m
         this.toastr.success('Invitation sent successfully!');[m
[31m-[m
[31m-        this.invitationService.sendEmail(groupName).subscribe({[m
[31m-          next: (emailResponse) => {[m
[31m-            console.log('Email sent successfully:', emailResponse);[m
[31m-            this.toastr.success('Email notification sent!');[m
[31m-          },[m
[31m-          error: (emailError) => {[m
[31m-            console.error('Error sending email:', emailError);[m
[31m-            this.toastr.error('Failed to send email notification');[m
[31m-          }[m
[31m-        });[m
[32m+[m[32m        this.closeInvitationModal();[m
       },[m
       error: (error) => {[m
         console.error('Error sending invitation:', error);[m
[31m-        this.toastr.error('Failed to send invitation');[m
[32m+[m[32m     